# Making sense of it

## `NSLinguisticTagger`


## `NSDataDetector`

## Putting it all together

One of the quirks of `NSLinguisticTagger` is being quite finicky with incomplete sentences. However, when user gives Siri-like commands, it's exactly the type of sentences he comes up with: "Get me Uber" or "What's the weather like". This kind of sentences might easily confuse `NSLinguisticTagger` and when it confused, it will spit out empty lemmas and "Other words" instead of verbs and nouns when identifying syntactical classes. To avoid it, I came up with a really trivial trick that solves most of the cases. Analyze output of `NSLinguisticTagger`, if amount of `.OtherWord` or empty lemmas is above certain threshold (50% for example), prepend a prefix ("Could you please" yields particularly good results in my tests, but YMMV), and run analysis again.
Now, knowing this, we are ready to build our tokenizer!

```swift
protocol TokenizerPlugin {
    func process(text: String) -> [Token]
}

struct Tokenizer {
    init(plugins: [TokenizerPlugin])
    func process(text: String) -> Result
}
```

Quite simple! Now we can write plugins each one for various data detector types and linguistic tagger types. We are initializing `Tokenizer` with all the plugins we want to use and run `process` on the text. Returned `Result` will contain original text and array of `Token`s. Where each token represents a particular range of text and all the `TokenValue`s array. For example, in the sentence "What's the weather going to be like tomorrow" the word "tomorrow" would have 3 `TokenValue` associated with it: `Lemma` tomorrow, `LexicalClass` "Adverb" and a detected data of case `.Date` containing the date of when tomorrow exactly starts.